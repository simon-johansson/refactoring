{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Code","props","react_default","a","createElement","className","text","App","state","technique","before","after","imgName","title","linkUrl","index","techniques","Object","keys","data","length","obj","Math","random","randomProperty","this","setState","Prism","highlightAll","document","addEventListener","onKeyPress","bind","event","key","setTechniqueByIndex","_","find","_this$state$technique","href","target","src","concat","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ukhCAYA,SAASA,EAAKC,GACZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAuBJ,EAAMK,WAgEpCC,6MA1DbC,MAAQ,CACNC,UAAW,CACTC,OAAQ,GACRC,MAAO,GACPC,QAAS,GACTC,MAAO,GACPC,QAAS,GACTC,MAAO,GAETC,WAAYC,OAAOC,KAAKC,GAAMC,2FAI9B,IAAMX,EA3BW,SAAAY,GACnB,IAAIH,EAAOD,OAAOC,KAAKG,GACvB,OAAOA,EAAIH,EAAMA,EAAKE,OAASE,KAAKC,UAAa,IAyB7BC,CAAeL,GACjCM,KAAKC,SAAS,CAAEjB,cAEhBkB,IAAMC,eAENC,SAASC,iBAAiB,UAAWL,KAAKM,WAAWC,KAAKP,OAAO,sCAGxDQ,GACS,cAAdA,EAAMC,KACRT,KAAKU,oBAAoBV,KAAKjB,MAAMC,UAAUM,MAAQ,GAEtC,eAAdkB,EAAMC,KACRT,KAAKU,oBAAoBV,KAAKjB,MAAMC,UAAUM,MAAQ,+CAItCA,GAClB,IAAIN,EACgCA,EAAhCM,GAASU,KAAKjB,MAAMQ,WAAwBoB,IAAEC,KAAKlB,EAAM,CAAC,QAAS,IAC9DJ,GAAS,EAAeqB,IAAEC,KAAKlB,EAAM,CAAC,QAASM,KAAKjB,MAAMQ,aAClDoB,IAAEC,KAAKlB,EAAM,CAAC,QAASJ,IACxCU,KAAKC,SAAS,CAAEjB,cAChBkB,IAAMC,gDAGC,IAAAU,EAC4Cb,KAAKjB,MAAMC,UAAtDC,EADD4B,EACC5B,OAAQC,EADT2B,EACS3B,MAAOC,EADhB0B,EACgB1B,QAASC,EADzByB,EACyBzB,MAAOC,EADhCwB,EACgCxB,QAEvC,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGmC,KAAMzB,EAAS0B,OAAO,UACvBtC,EAAAC,EAAAC,cAAA,UAAKS,IAEPX,EAAAC,EAAAC,cAAA,OAAKqC,IAAG,WAAAC,OAAa9B,GAAW+B,IAAI,KACpCzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACJ,EAAD,CAAMM,KAAMI,IACZR,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACJ,EAAD,CAAMM,KAAMK,aApDJiC,IAAMC,WCRJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASxB,SAASyB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.62771815.chunk.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport Prism from \"prismjs\";\nimport data from \"./data.json\";\nimport \"./App.css\";\nimport \"./prism.css\";\n\nvar randomProperty = obj => {\n  var keys = Object.keys(obj);\n  return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nfunction Code(props) {\n  return (\n    <pre>\n      <code className=\"language-javascript\">{props.text}</code>\n    </pre>\n  );\n}\n\nclass App extends React.Component {\n  state = {\n    technique: {\n      before: \"\",\n      after: \"\",\n      imgName: \"\",\n      title: \"\",\n      linkUrl: \"\",\n      index: 0\n    },\n    techniques: Object.keys(data).length\n  };\n\n  componentDidMount() {\n    const technique = randomProperty(data);\n    this.setState({ technique });\n\n    Prism.highlightAll();\n\n    document.addEventListener(\"keydown\", this.onKeyPress.bind(this), false);\n  }\n\n  onKeyPress(event) {\n    if (event.key === \"ArrowLeft\") {\n      this.setTechniqueByIndex(this.state.technique.index - 1);\n    }\n    if (event.key === \"ArrowRight\") {\n      this.setTechniqueByIndex(this.state.technique.index + 1);\n    }\n  }\n\n  setTechniqueByIndex(index) {\n    let technique;\n    if (index >= this.state.techniques) technique = _.find(data, ['index', 1]);\n    else if (index <= 1) technique = _.find(data, ['index', this.state.techniques]);\n    else technique = _.find(data, ['index', index]);\n    this.setState({ technique });\n    Prism.highlightAll();\n  }\n\n  render() {\n    const { before, after, imgName, title, linkUrl } = this.state.technique;\n\n    return (\n      <div className=\"App\">\n        <a href={linkUrl} target=\"_blank\">\n          <h1>{title}</h1>\n        </a>\n        <img src={`/images/${imgName}`} alt=\"\" />\n        <div className=\"code-examples\">\n          <Code text={before} />\n          <p>â†“</p>\n          <Code text={after} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}